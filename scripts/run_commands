#!/usr/bin/env python3

import getpass
import sys
import re
import resource
import asyncio
import multiprocessing
import time
import socket
from functools import partial
from multiprocessing import Manager
from iTTY.utils import StringUtils
from iTTY import iTTY, Extractor, CouldNotConnectError, BrokenConnectionError

DEV_TYPES = {1: 'ALU',
             2: 'XR',
             3: 'IOS',
             4: 'JUNOS',
             5: 'ASA',
             6: 'F5',
             7: 'EOS',
             8: 'A10',
             9: 'ACS',
             10: 'NIAGARA',
             11: 'NXOS',
             12: 'IOSXE',
             13: 'DSX'}

CPUS = multiprocessing.cpu_count()
ULIMIT = resource.getrlimit(resource.RLIMIT_NOFILE)[0]
USERNAME = ''
PASSWORD = ''
TIMEOUT = 10
DEVICE_LIST = []
GREP = False
CONFIG_MODE = False

if len(sys.argv) > 1:
    for i, arg in enumerate(sys.argv):
        if arg == '-u':
            USERNAME = sys.argv[i+1]
        elif arg == '-p':
            PASSWORD = sys.argv[i+1]
        elif arg == '-d':
            DEVICE_LIST = sys.argv[i+1]
        elif arg == '-g':
            GREPPABLE_OUTPUT = True
        elif arg == '-t':
            TIMEOUT = int(sys.argv[i+1])
        elif arg == '-c':
            CONFIG_MODE = True
USERNAME = USERNAME or input("Username: ")
PASSWORD = PASSWORD or getpass.getpass()
DEVICE_LIST = DEVICE_LIST or input("Device list file: ")

if not all((USERNAME, PASSWORD, DEVICE_LIST)):
    print('Need username, password, and devicelist to proceed')
    exit()

GREP = GREP or True if re.match('y', input('Would you like greppable output? [y/n]'), flags=re.IGNORECASE) else False
CONFIG_MODE = CONFIG_MODE or True if re.match('y', input('Are you configuring devices? [y/n]'), flags=re.IGNORECASE) else False

DEVICES = [[]]
with open(DEVICE_LIST, 'r') as hosts:
    hostnames = {host for host in hosts.readlines() if host.strip()}
    DEV_COUNT = len(hostnames)
    group_count = max((CPUS, int(DEV_COUNT/int(ULIMIT/CPUS))))
    for index, host in enumerate(hostnames):
        if index % group_count >= len(DEVICES):
            DEVICES.append([])
        DEVICES[index % group_count].append(host.strip())

if not DEVICES:
    print('Could not generate device list')
    exit()

COMMANDS = dict()
try:
    with open('ALU', 'r') as f:
        COMMANDS['ALU'] = ['environment no more'] + list(f)[:]
except: pass
try:
    with open('XR', 'r') as f:
        COMMANDS['XR'] = ['terminal length 0'] + list(f)[:]
except: pass
try:
    with open('IOS', 'r') as f:
        COMMANDS['IOS'] = ['terminal length 0'] + list(f)[:]
except: pass
try:
    with open('JUNOS', 'r') as f:
        COMMANDS['JUNOS'] = ['set cli screen-length 0'] + list(f)[:]
except: pass
try:
    with open('ASA', 'r') as f:
        COMMANDS['ASA'] = ['terminal pager 0'] + list(f)[:]
except: pass
try:
    with open('F5', 'r') as f:
        COMMANDS['F5'] = list(f)[:]
except: pass
try:
    with open('EOS', 'r') as f:
        COMMANDS['EOS'] = ['terminal length 0'] + list(f)[:]
except: pass
try:
    with open('A10', 'r') as f:
        COMMANDS['A10'] = list(f)[:]
except: pass
try:
    with open('ACS', 'r') as f:
        COMMANDS['ACS'] = ['terminal length 0'] + list(f)[:]
except: pass
try:
    with open('NIAGARA', 'r') as f:
        COMMANDS['NIAGARA'] = ['terminal length 0'] + list(f)[:]
except: pass
try:
    with open('NXOS', 'r') as f:
        COMMANDS['NXOS'] = ['terminal length 0'] + list(f)[:]
except: pass
try:
    with open('IOSXE', 'r') as f:
        COMMANDS['IOSXE'] = ['terminal length 0'] + list(f)[:]
except: pass
if not COMMANDS:
    print('Could not gather commands to run')
    exit()

def run_em(devices, report, failed):
    loop = asyncio.get_event_loop()
    tasks = [loop.create_task(run_commands(device, report, failed)) for device in devices]
    if tasks:
        loop.run_until_complete(asyncio.wait(tasks))

async def run_commands(device, report, failed):
    try:
        async with iTTY(host=device, username=USERNAME, password=PASSWORD, timeout=TIMEOUT) as tty:
            if not tty.os:
                print('NO OS', device)
                failed.append(device)
                return
            try:
                commands = COMMANDS.get(DEV_TYPES[tty.os])
                if not commands:
                    print(f'No commands for this device-type: {DEV_TYPES[tty.os]}, host: {device}')
                    failed.append(device)
                    return
            except IndexError:
                print(f'No commands for this device-type: {DEV_TYPES[tty.os]}, host: {device}')
                failed.append(device)
                return
            for command in commands:
                if re.search('<.*>', command):
                    var = re.search('<.*>', command).group(0)
                    if re.search('HOSTNAME', var):
                        hostname = await Extractor.extract_hostname(tty=tty)
                        if hostname:
                            command = re.sub(var, hostname, command)
                        else:
                            print(f'Could not find hostname for {tty.host}')
                            failed.append(device)
                            return
                    elif re.search('CONTACT', var):
                        contact = await Extractor.extract_contact(tty=tty)
                        if contact:
                            command = re.sub(var, contact, command)
                        else:
                            print(f'Could not find contact for {tty.host}')
                            failed.append(device)
                            return
                    elif re.search('LOCATION', var):
                        location = await Extractor.extract_location(tty=tty)
                        if location:
                            command = re.sub(var, location, command)
                        else:
                            print(f'Could not find location for {tty.host}')
                            failed.append(device)
                            return
            command_header = 0 if GREP else 1
            output = await tty.async_run_commands(commands, timeout=10, command_header=command_header)
            if not tty.sift_output(output, tty.prompt, '---', commands):
                print('No output from ', device)
                failed.append(device)
                return
    except (CouldNotConnectError, BrokenConnectionError):
        print('Could not connect to', device)
        failed.append(device)
        return
    except OSError:
        await asyncio.sleep(10)
        await run_commands(device, report, failed)
        return
    output = tty.sift_output(output, [])
    prompt = re.compile("".join((tty.prompt.strip('#>'), '([\(>]config.*(\))?)?', '(?:#|>|$| )')))
    if GREP:
        command_regex = re.compile('|'.join((re.sub(r'\|', '\\|', c.strip()) for c in COMMANDS[tty.os])))
        grep = []
        for line in output:
            if not line.strip():
                continue
            if command_regex.search(str(line)):
                command = command_regex.search(str(line)).group(0)
            if CONFIG_MODE:
                grep.append(','.join((device, command.strip(), str(line).strip())))
            else:
                if prompt.match(line):
                    continue
                grep.append(','.join((device, command.strip(), str(line).strip())))
        report.append(grep)
    else:
        if CONFIG_MODE:
            report.append(('\n\n', StringUtils.pad(device, 10, '-'), '\n'.join(line for line in output)))
        else:
            report.append(('\n\n', StringUtils.pad(device, 10, '-'), '\n'.join(line for line in output if not prompt.match(line))))


if __name__ == '__main__':
    manager = multiprocessing.Manager()
    report = manager.list()
    failed = manager.list()
    start = time.time()
    with multiprocessing.Pool(processes=CPUS, maxtasksperchild=1) as pool:
        pool.imap_unordered(partial(run_em, report=report, failed=failed), DEVICES)
        pool.close()
        pool.join()
    end = time.time()
    for line in report:
        for l in line:
            print(l)
    print('\n\n', '-' * 100, '\n\n')
    print('Failed to run commands on the below devices:')
    for line in failed:
        print('  ', line)
    print('\n\n', f'Successfully ran commands on {DEV_COUNT - len(failed)} out of {DEV_COUNT} devices in {int((end - start)/60)} minutes and {int(end - start) % 60} seconds', '\n')
