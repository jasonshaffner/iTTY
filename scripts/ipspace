#!/usr/bin/env python
#This works for IOS-XR
#This will try SSH first then try Telnet
#This script will pull the avalable space in a supernet
import getpass, netaddr, re, sys
from iTTY import iTTY
from netaddr import *

tty = iTTY()
if len(sys.argv) < 5:
        tty.setlogin()
        tty.sethost(raw_input("Device: ").split('.', 1)[0])
	prefix = {raw_input("Prefix to look up: ")}
else:
        tty.setlogin(username=sys.argv[1],password=sys.argv[2])
        tty.sethost(sys.argv[3].split('.', 1)[0])
        prefix = {sys.argv[4]}
for p in prefix:
	octet = p.split(".")[0]
	commandprefix = p
print prefix
print octet
print commandprefix
command_delay = 20
report = []
xrcommands = ["terminal len 0", "show route longer-prefixes " + commandprefix + " | begin " + octet + "."+ "\n"]
routetable = []

tty.setcommands(xrcommands)
if tty.securelogin(): 
	report.append(tty.runseccommands(command_delay))
elif tty.unsecurelogin():
	report.append(tty.rununseccommands(command_delay))

for y in report:
	for line in y:
		if re.search("Bundle", line):continue
		try:
			if re.search("O", line):
				ospf = line.split(" ")[2]
				routetable.append(ospf)
			elif re.search("B", line):
				bgp = line.split(" ")[4]
			routetable.append(bgp)
		except:continue

try:
	ipv4_addr_space = IPSet(prefix)
	router_routes = IPSet(routetable)
	unavailable = router_routes
	available = ipv4_addr_space ^ unavailable
	print "\n\n********IP Space that is NOT in routing********\n\n"
	for cidr in available.iter_cidrs():
		print cidr

except AddrFormatError:
	print "Errors"
