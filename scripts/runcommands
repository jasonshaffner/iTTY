#!/usr/bin/env python3

import getpass
import sys
import asyncio
import multiprocessing
from functools import partial
from multiprocessing import Manager
from stringutils import StringUtils
from iTTY import iTTY, CouldNotConnectError

def parse_params():
    if len(sys.argv) < 5:
        username = input("Username: ")
        password = getpass.getpass()
        devicelist = input("Device list file: ")
        configs = input("Are you making config changes? [y/n] ")
    else:
        username = sys.argv[1]
        password = sys.argv[2]
        devicelist = sys.argv[3]
        configs = sys.argv[4]
    if "y" in configs: command_delay = 2
    else: command_delay = 10 #Seconds to wait for each command to finish
    return (username, password, devicelist, command_delay)

def get_devices(devicelist):
    devices = [[]]
    with open(devicelist, 'r') as hostnames:
        for index, host in enumerate(hostnames):
            if index % CPUS >= len(devices):
                devices.append([])
            devices[index % CPUS].append(host.strip())
    return devices

def gather_commands():
    alu = []
    try:
        with open('ALU', 'r') as f:
            alu = ['environment no more'] + list(f)[:]
    except: pass
    xr = []
    try:
        with open('XR', 'r') as f:
            xr = ['terminal length 0'] + list(f)[:]
    except: pass
    ios = []
    try:
        with open('IOS', 'r') as f:
            ios = ['terminal length 0'] + list(f)[:]
    except: pass
    junos = []
    try:
        with open('JUNOS', 'r') as f:
            junos = ['set cli screen-length 0'] + list(f)[:]
    except: pass
    asa = []
    try:
        with open('ASA', 'r') as f:
            asa = ['enable', PASSWORD, 'terminal pager 0'] + list(f)[:]
            print(asa)
    except: pass
    f5 = []
    try:
        with open('F5', 'r') as f:
            f5 = list(f)[:]
    except: pass
    eos = []
    try:
        with open('EOS', 'r') as f:
            eos = list(f)[:]
    except: pass
    a10 = []
    try:
        with open('A10', 'r') as f:
            a10 = list(f)[:]
    except: pass
    return ([], alu, xr, ios, junos, asa, f5, eos, a10)

def run_em(devices, report):
    loops = []
    loop = asyncio.new_event_loop()
    for device in devices:
        print('DEVICE', device)
        task = loop.create_task(run_commands(device, report))
        loops.append(task)
    if loops:
        print('WE GOTS LOOPS')
        loop.run_until_complete(asyncio.wait(loops))

async def run_commands(device, report):
    print('RUNNING COMMANDS ON', device)
    try:
        async with iTTY(host=device, username=USERNAME, password=PASSWORD, timeout=10) as tty:
            if not COMMANDS[tty.os]:
                print('No commands for this device-type', tty.os, device)
                return
            tty.set_commands(COMMANDS[tty.os])
            output = await tty.async_run_commands(CONFIG_MODE, command_header=1)
    except CouldNotConnectError:
        print('Could not connect to', device)
        return
    if output:
        report.append(('\n\n', StringUtils.pad(device, 10, '-'), '\n'.join(line for line in tty.sift_output(output, tty.prompt))))


if __name__ == '__main__':
    USERNAME, PASSWORD, DEVICELIST, CONFIG_MODE = parse_params()
    if not all((USERNAME, PASSWORD, DEVICELIST, CONFIG_MODE)):
        print('Need username, password, and devicelist to proceed')
        exit()
    CPUS = multiprocessing.cpu_count() * 8
    DEVICES = get_devices(DEVICELIST)
    if not DEVICES:
        print('Could not generate device list')
        exit()
    for line in DEVICES:
        print(line)
    COMMANDS = gather_commands()
    for command in COMMANDS:
        print(command)
    manager = multiprocessing.Manager()
    report = manager.list()
    with multiprocessing.Pool(processes=CPUS, maxtasksperchild=1) as pool:
        pool.imap_unordered(partial(run_em, report=report), DEVICES)
        pool.close()
        pool.join()
    for line in report:
        for l in line:
            print(l)
