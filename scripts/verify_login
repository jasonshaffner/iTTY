#!/usr/bin/env python3

import sys
import re
import getpass
import time
import resource
import asyncio
import multiprocessing
from functools import partial
from iTTY import iTTY, CouldNotConnectError, BrokenConnectionError

"""
Attempts only to login to devices (first via ssh, then via telnet)
Prints string determining whether and how it was able to login
"""

def parse_params():
    username = ''
    password = ''
    device_list = []
    if len(sys.argv) > 1:
        for i, arg in enumerate(sys.argv):
            if arg == '-u':
                username = sys.argv[i+1]
            elif arg == '-p':
                password = sys.argv[i+1]
            elif arg == '-d':
                device_list = sys.argv[i+1]
    if not username:
        username = input("Username: ")
    if not password:
        password = getpass.getpass()
    if not device_list:
        device_list = input("Device list file: ")
    return (username, password, device_list)

async def attempt_login(host, failed, ssh, telnet):
    host = host.strip()
    try:
        async with iTTY(host=host.strip(), username=USERNAME, password=PASSWORD, timeout=10) as tty:
            login_method = tty.telnet_or_ssh()
            print(f'{host} reachable via {login_method}')
            if login_method == 'SSH':
                ssh.value += 1
            else:
                telnet.value += 1
    except CouldNotConnectError as e:
        failed.value += 1
        for exception in e.exceptions.values():
            if re.search('Authentication', exception):
                print(f'authentication failed for {host}')
                return
        print(f'could not connect to {host}')

def get_devices(devicelist):
    devices = [[]]
    with open(devicelist, 'r') as hosts:
        hostnames = list(hosts)
        dev_count = len(hostnames)
        if dev_count > int(ULIMIT/CPUS):
            group_count = int(dev_count/int(ULIMIT/CPUS))
        else:
            group_count = CPUS
        for index, host in enumerate(hostnames):
            if index % group_count >= len(devices):
                devices.append([])
            devices[index % group_count].append(host.strip())
    return devices, dev_count

def verify(devices, failed, ssh, telnet):
    loops = []
    loop = asyncio.new_event_loop()
    for device in devices:
        task = loop.create_task(attempt_login(device, failed, ssh, telnet))
        loops.append(task)
    if loops:
        loop.run_until_complete(asyncio.wait(loops))

if __name__ == '__main__':
    USERNAME, PASSWORD, DEVICELIST = parse_params()
    if not all((USERNAME, PASSWORD, DEVICELIST)):
        print('Need username, password, and devicelist to proceed')
        exit()
    CPUS = multiprocessing.cpu_count()
    ULIMIT = resource.getrlimit(resource.RLIMIT_NOFILE)[0] * 2
    DEVICES, DEV_COUNT = get_devices(DEVICELIST)
    if not DEVICES:
        print('Could not generate device list')
        exit()
    manager = multiprocessing.Manager()
    failed = manager.Value(int, 0)
    ssh = manager.Value(int, 0)
    telnet = manager.Value(int, 0)
    start = time.time()
    with multiprocessing.Pool(processes=CPUS, maxtasksperchild=1) as pool:
        pool.imap_unordered(partial(verify, failed=failed, ssh=ssh, telnet=telnet), DEVICES)
        pool.close()
        pool.join()
    end = time.time()
    print('\n\n', '-' * 100, '\n\n')
    print(f'Successfully logged into {ssh.value + telnet.value} out of {DEV_COUNT} devices in {int((end - start)/60)} minutes and {int(end - start) % 60} seconds')
    print('\n', f'{ssh.value} devices were reachable via SSH. {telnet.value} devices were reachable via Telnet.', '\n')
